#Assignment 1 by Mimi Trinhimport pandas as pd  # data frame operations  import numpy as np  # arrays and math functionsimport matplotlib.pyplot as plt  # static plottingimport seaborn as sns  # pretty plotting, including heat map# correlation heat map setup for seaborndef corr_chart(df_corr):    corr=df_corr.corr()    #screen top half to get a triangle    top = np.zeros_like(corr, dtype=np.bool)    top[np.triu_indices_from(top)] = True    fig=plt.figure()    fig, ax = plt.subplots(figsize=(12,12))    sns.heatmap(corr, mask=top, cmap='coolwarm',         center = 0, square=True,         linewidths=.5, cbar_kws={'shrink':.5},         annot = True, annot_kws={'size': 9}, fmt = '.3f')               plt.xticks(rotation=45) # rotate variable labels on columns (x axis)    plt.yticks(rotation=0) # use horizontal variable labels on rows (y axis)    plt.title('Correlation Heat Map')       plt.savefig('plot-corr-map.pdf',         bbox_inches = 'tight', dpi=None, facecolor='w', edgecolor='b',         orientation='portrait', papertype=None, format=None,         transparent=True, pad_inches=0.25, frameon=None)      np.set_printoptions(precision=3)# read in comma-delimited text file, creating a pandas DataFrame objectvalid_survey_input = pd.read_csv('mspa-survey-data.csv')print(pd.DataFrame.head(valid_survey_input))# use the RespondentID as label for the rows... the index of DataFramevalid_survey_input.set_index('RespondentID', drop = True, inplace = True)print(pd.DataFrame.head(valid_survey_input))# examine the structure of the DataFrame objectprint('\nContents of initial survey data ---------------')# could use len() or first index of shape() to get number of rows/observationsprint('\nNumber of Respondents =', len(valid_survey_input)) # show the column/variable names of the DataFrame# note that RespondentID is no longer presentprint(valid_survey_input.columns)# abbreviated printing of the first five rows of the data frameprint(pd.DataFrame.head(valid_survey_input)) # shorten the variable/column names for software preference variablessurvey_df = valid_survey_input.rename(index=str, columns={    'Personal_JavaScalaSpark': 'My_Java',    'Personal_JavaScriptHTMLCSS': 'My_JS',    'Personal_Python': 'My_Python',    'Personal_R': 'My_R',    'Personal_SAS': 'My_SAS',    'Professional_JavaScalaSpark': 'Prof_Java',    'Professional_JavaScriptHTMLCSS': 'Prof_JS',    'Professional_Python': 'Prof_Python',    'Professional_R': 'Prof_R',    'Professional_SAS': 'Prof_SAS',    'Industry_JavaScalaSpark': 'Ind_Java',    'Industry_JavaScriptHTMLCSS': 'Ind_JS',    'Industry_Python': 'Ind_Python',    'Industry_R': 'Ind_R',    'Industry_SAS': 'Ind_SAS'})print(valid_survey_input.columns)#the column names stay the same when using print() of dataset#but when refer the column in command (see line of code below), can use the short abbreviation of the columns# define subset DataFrame for analysis of software preferences software_df = survey_df.loc[:, 'My_Java':'Ind_SAS']# single scatter plot examplefig, axis = plt.subplots()axis.set_xlabel('Personal Preference for R')axis.set_ylabel('Personal Preference for Python')plt.title('R and Python Perferences')scatter_plot = axis.scatter(survey_df['My_R'],     survey_df['My_Python'],    facecolors = 'none',     edgecolors = 'blue') plt.savefig('plot-scatter-r-python.pdf',     bbox_inches = 'tight', dpi=None, facecolor='w', edgecolor='b',     orientation='portrait', papertype=None, format=None,     transparent=True, pad_inches=0.25, frameon=None)  survey_df_labels = [    'Personal Preference for Java/Scala/Spark',    'Personal Preference for Java/Script/HTML/CSS',    'Personal Preference for Python',    'Personal Preference for R',    'Personal Preference for SAS',    'Professional Java/Scala/Spark',    'Professional JavaScript/HTML/CSS',    'Professional Python',    'Professional R',    'Professional SAS',    'Industry Java/Scala/Spark',    'Industry Java/Script/HTML/CSS',    'Industry Python',    'Industry R',    'Industry SAS'        ]    # create a set of scatter plots for personal, professional, and industry preferences#modify starter code to change range(5) to range(15)for i in range(15):    for j in range(15):        if i != j:            file_title = survey_df.columns[i] + '_and_' + survey_df.columns[j]            plot_title = survey_df.columns[i] + ' and ' + survey_df.columns[j]            fig, axis = plt.subplots()            axis.set_xlabel(survey_df_labels[i])            axis.set_ylabel(survey_df_labels[j])            plt.title(plot_title)            scatter_plot = axis.scatter(survey_df[survey_df.columns[i]],             survey_df[survey_df.columns[j]],            facecolors = 'none',             edgecolors = 'blue')             plt.savefig(file_title + '.pdf',                 bbox_inches = 'tight', dpi=None, facecolor='w', edgecolor='b',                 orientation='portrait', papertype=None, format=None,                 transparent=True, pad_inches=0.25, frameon=None)  # examine intercorrelations among software preference variables# with correlation matrix/heat mapcorr_chart(df_corr = software_df) # descriptive statistics for software preference variablesprint('\nDescriptive statistics for survey data ---------------')print(software_df.describe())# descriptive statistics for one variableprint('\nDescriptive statistics for courses completed ---------------')print(survey_df['Courses_Completed'].describe())print(software_df.mean().sort_values())software_df.mean().sort_values().plot(kind='bar')plt.title('Mean Survey Score of Each Software',color='red')plt.xlabel('Software',color='blue')plt.ylabel('Survey Score',color='green')plt.show()print(software_df.median().sort_values())#the values of mean and median are similar but not the same, so there's skewness but not significant#the order of software remains the samesoftware_df.median().sort_values().plot(kind='bar')plt.title('Median Survey Score of Each Software',color='red')plt.xlabel('Software',color='blue')plt.ylabel('Survey Score',color='green')plt.show()course_interest_df=survey_df.loc[:,'Python_Course_Interest':'Systems_Analysis_Course_Interest']course_interest_df.head()course_interest_df.describe()course_interest_df.mean().sort_values()course_interest_df.mean().sort_values().plot(kind='bar')plt.title('Mean Survey Score of Each Course Interest',color='red')plt.xlabel('Course',color='blue')plt.ylabel('Survey Score',color='green')plt.show()#this is the end of the data visualization section#the next section involves data transformation using scikit learnfrom sklearn.preprocessing import StandardScalerfrom sklearn.preprocessing import MinMaxScaler# transformations a la Scikit Learn# select variable to examine, eliminating missing data codesX = survey_df['Courses_Completed'].dropna()#Unscaledunscaled_fig, ax = plt.subplots()sns.distplot(X).set_title('Unscaled')unscaled_fig.savefig('Transformation-Unscaled' + '.pdf',     bbox_inches = 'tight', dpi=None, facecolor='w', edgecolor='b',     orientation='portrait', papertype=None, format=None,     transparent=True, pad_inches=0.25, frameon=None)  #Standard Scalerstandard_fig, ax = plt.subplots()sns.distplot(StandardScaler().fit_transform(np.array(X).reshape(-1,1))).set_title('StandardScaler')standard_fig.savefig('Transformation-StandardScaler' + '.pdf',     bbox_inches = 'tight', dpi=None, facecolor='w', edgecolor='b',     orientation='portrait', papertype=None, format=None,     transparent=True, pad_inches=0.25, frameon=None)  #replaced original jump start code fit_transform(X) with fit_transform(np.array(X).reshape(-1,1))#another way to fix the error is fit_transform(X.to_frame(name=None))#otherwise will get a coding error. Got solution from students in WhatsApp and Canvas DB#Min Max Scalerminmax_fig, ax = plt.subplots()sns.distplot(MinMaxScaler().fit_transform(np.array(X).reshape(-1,1))).set_title('MinMaxScaler')minmax_fig.savefig('Transformation-MinMaxScaler' + '.pdf',     bbox_inches = 'tight', dpi=None, facecolor='w', edgecolor='b',     orientation='portrait', papertype=None, format=None,     transparent=True, pad_inches=0.25, frameon=None) #replaced original jump start code fit_transform(X) with fit_transform(np.array(X).reshape(-1,1))#another way to fix the error is fit_transform(X.to_frame(name=None))#otherwise will get a coding error. Got solution from students in WhatsApp and Canvas DB#Natural Loglog_fig, ax = plt.subplots()sns.distplot(np.log(X)).set_title('NaturalLog')log_fig.savefig('Transformation-NaturalLog' + '.pdf',     bbox_inches = 'tight', dpi=None, facecolor='w', edgecolor='b',     orientation='portrait', papertype=None, format=None,     transparent=True, pad_inches=0.25, frameon=None)  #Thank you for viewing my code!